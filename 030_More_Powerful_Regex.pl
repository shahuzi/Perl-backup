use strict;
use warnings;



############非贪婪量词####################
##########################################

# 之前看到的四个量词： * + ? {1,5}
# 都是贪婪量词，也就是说在保证整体匹配的前提下，它们
# 会尽量匹配长字符串 ，实在不行才会吐出一点。
# 举例说明
# /fred.+barney/ 来匹配 fred and barney went bowling last night。
# 显然会匹配成功，深入了解一下匹配的过程到底发生了什么。
# 模式中fred部分将会逐字匹配与其相同的字符串，但加号量词是个贪婪的量词，它会尽量匹配更多的字符串，所以，到此位置，它会一口气吞掉字符串剩下的部分，一路到最后的night。
# 然后轮到模式中的barney，但是它已经无法进行匹配，因为刚才已经进行到字符串的最后，此时.+模式就会很不情愿地吐出一个字符，反正就算少了一个字符，这部分模式还算匹配成功。
# 现在又轮到barney进行匹配，但还是无法成功，因此.+又再次吐出一个字符，如此直到匹配成功，于是整个模式也就匹配成功了。

# 正则表达式引擎会一直进行上述的回溯动作，不断地调整模式匹配的内容来适应字符串，直到终于找到了一个整体匹配成功的方案位置，要是直到组后都没找到就宣告失败，从这个例子可知回溯的操作非常繁琐。

# 然而，对于每一个贪婪的量词都有一个非贪婪的量词，以加号为例，可以该用非贪婪量词 +?  这表示一次或更多匹配，但是匹配的字符串却是越短越好。

# 把刚才的模式改成/fred.+?barney/，再看看这个新的量词是如何运作的。

# 模式中的fred还是一样，但这次模式中的下一部分换成了.+?，它会匹配到一个以上的字符，但是越短越好，也就是最好是一个字符，所以它匹配的部分是fred后面的空白字符，接下来是模式barney，但就目前的位置而言，匹配会失败，因为要匹配的部分是and barney的and，于是.+?模式又很不情愿地多匹配了一个字符a，然后barney再试，仍然失败，所以.+?再吞下一个字符n，如此循环，直到barney匹配成功，则整个模式的匹配成功了。

# 在速度上一般会大有改善，但是这是在barney跟fred离的很近的情况下才能成立，如果要处理的数据都是fred在字符串的开头处，barney在末尾，那么选用贪婪的量词反而会更快

# 其它的量词的非贪婪版本都是加？
# *?  {5,10}?   ??



########跨行的模式匹配#################
#######################################


# 传统的正则表达式都是用来匹配单行文本

$_ = "I'm much better\nthan Barney is\nat bowling,\nWilma.\n";

# ^ $ 通常是用来匹配整个字符串的开始和结束的
# 但是当模式加上/m修饰符后，它们也能匹配串内的换行符
# 这样以来，它们所代表的位置就不是整个字符串的头尾，而是每行的开头和结尾

if (/^I.*\.\n$/s)   # 匹配成功，说明这样其实是
				    # 匹配整个字符串，包括了换行符
{
	print "Yes!\n";
}
else
{
	print "No!\n";
}


if (/^wilma\b/im) # 匹配成功，加上/m，实现多行匹配
{
	print "Found 'wilma' at the start of the line\n";
}

# 同样地，可以对多行文本进行逐个替换

my $filename = "fred";
open FILE, $filename or die "Can't open '$filename':$!";

my $lines = join '', <FILE>; # 不加join只会读第一行，实际上是在每一行的前面什么都不加，但是把整体变成一个字符串"line1\nline2\nline3\n.....lineN\n"
print $lines;
# 将文件名放在每一行的开头
$lines =~ s/^/$filename:/gm;
print $lines;
close FILE;


########一次更新多个文件#################
#########################################

# 程序化地更新文件内容时，最常见的做法是打开一个
# 文件，然后把跟旧文件相同的内容写进去，并在需要
# 的位置进行改写。

# 具体见perl语言入门（第五版） P155 pdf 169



























